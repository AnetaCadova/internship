1. Install IntelliJ IDEA
    - https://www.jetbrains.com/idea/download/#section=linux

2. In IntelliJ IDEA create a new maven project
    - IDEA asked you to fill some fields - how are they later used in the project?

          - groupId - This element indicates the unique identifier of the organization or group that created the project.
                    - The groupId is one of the key identifiers of a project and is typically based on the fully qualified domain name of your organization. 
                    - For example org.apache.maven.plugins is the designated groupId for all Maven plugins.

          - artifactId - This element indicates the unique base name of the primary artifact being generated by this project. 
                       - The primary artifact for a project is typically a JAR file. Secondary artifacts like source bundles also use the artifactId as part of their final name.
                       - A typical artifact produced by Maven would have the form <artifactId>-<version>.<extension> (for example, myapp-1.0.jar).

3. What is JUnit? - JUnit is a unit testing framework for the Java programming language.
                  - JUnit has been important in the development of test-driven developmen.  
    - add junit maven dependency to your project
    - create a test class with simple test method with body: `Assert.assertEquals(1, 2);`
        - the test class should have name which ends with "Test", why? - When calling from the command line mvn test, Maven uses the maven-surefire-plugin to execute the tests. 
                                                                       - In its documentation it says that the default configuration is to pick up every file name that matches this expressions:
                                                                            **/Test*.java
                                                                            **/*Test.java
                                                                            **/*TestCase.java
                                                                       -A typo like NullCheckerTests, instead of NullCheckerTest prevents the tests in the class from being executed because
                                                                        the class itâ€™s just ignored during test execution.
        - how do you run the test from IDEA? - open test, right click on the file, -> run
        - how do you run the test from command line? - mvn test (in a directory, where pom.xml is located)
        - fix the test so it passes
        - how would you change the code so you do not have to use `Assert.` before assertEquals? import library

4. Get familiar with IDEA
    - how do you change java version for current project?  - From the main menu, select File | Project Structure (Ctrl+Shift+Alt+S).
                                                           - Under the Project Settings section, select Project.
                                                           - From the Project SDK list, select another SDK or SDK version. If the necessary SDK is not defined in IntelliJ IDEA yet,
                                                             click New and specify its home directory.

    - how do you change java version for all future projects? - project structure - platform settings
    - learn basic shortcuts
        - one line comment -CTRL + / ==> To comment/uncomment a line .
        - block comment - CTRL + Shift + / ==> To comment/uncomment block of code.
        - auto-format - ctrl + alt + l
        - optimize imports - alt + enter
        - go back to previous cursor position - alt + shift + <-

5. Add newest version of assertj dependency to your project
    - https://mvnrepository.com/artifact/org.assertj/assertj-core
    - what are main advantages of assertj in comparison with junit Assert? 
         - https://objectpartners.com/2013/09/18/the-benefits-of-using-assertthat-over-other-assert-methods-in-unit-tests/
         - Readability, Better Failure Messages, Type Safety
    - find out how to create simple assertions and change your test to use assertj
        - https://joel-costigliola.github.io/assertj/assertj-core-features-highlight.html
    - create more tests
        - play with other assertj testing functions
        - feel free to create an object class and try some basic tests with it

pom.xml -  the pom.xml will have all information to build your project.
        - For example you want to build a project and you have only the pom.xml sent to you via mail.       
        - If there are enough entries in the pom.xml then that is all you need!
        - You can import it to Eclipse, Maven will download your source code from CVS, download various dependency jars (like Spring, Apache Commons),
          run your test cases, build the jar/war, deploy to your jboss/app server, generate a report of your code quality (using Sonar, maybe). 

junit framework - JUnit is a Regression Testing Framework used by developers to implement unit testing in Java, and accelerate programming speed and increase the quality of code.

maven lifecycle - Maven is based around the central concept of a build lifecycle. What this means is that the process for building and distributing a particular artifact (project) is clearly defined.
                - For the person building a project, this means that it is only necessary to learn a small set of commands to build any Maven project,
                  and the POM will ensure they get the results they desired.
                - There are three built-in build lifecycles: default, clean and site. The default lifecycle handles your project deployment, the clean lifecycle handles project cleaning, 
                  while the site lifecycle handles the creation of your project's site documentation.
                - clean - remove all files generated by the previous build


